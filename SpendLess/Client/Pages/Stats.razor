@page "/stats"
@using SpendLess.Client.Services
@using SpendLess.Shared
@attribute [Authorize]
@inject ITransactionService TransactionService

<h3>Stats</h3>
<MudDatePicker Label="Choose month of the year" @bind-Date="YearMonth" OpenTo="OpenTo.Month" FixDay="1" DateFormat="MMMM" />

@*<div class="d-flex flex-grow-1 gap-10">
	<div>
		<MudChart ChartType="MudBlazor.ChartType.Donut" Width="100%" Height="300px" InputData="@(ExpensesList.ToArray())" InputLabels="@(CategoriesList.ToArray())">
			<CustomGraphics>
				<text class="donut-inner-text" x="47%" y="35%" dominant-baseline="middle" text-anchor="middle" fill="black" font-family="Helvetica" font-size="2">Total</text>
				<text class="donut-inner-text" x="47%" y="50%" dominant-baseline="middle" text-anchor="middle" fill="black" font-family="Helvetica" font-size="5">@Math.Round(ExpensesList.Sum(), 2)</text>
			</CustomGraphics>
		</MudChart>
	</div>
	<div>
		<MudChart ChartType="MudBlazor.ChartType.Bar" ChartSeries="@Series" @bind-SelectedIndex="Index" XAxisLabels="@XAxisLabels" Width="100%" Height="550px"></MudChart>
	</div>
</div>*@

@*Keyframes by https://animate.style/*@
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css" />
<style type="text/css">

	.bounceIn {
		opacity: 0;
		animation-delay: 0.5s;
		animation-duration: 0.5s;
		animation-name: bounceIn;
		animation-fill-mode: forwards;
	}

	.bounceOut {
		animation-duration: 0.5s;
		animation-name: bounceOut;
		animation-fill-mode: forwards;
	}

	.backInDown {
		opacity: 0;
		animation-delay: 0.5s;
		animation-duration: 0.5s;
		animation-name: backInDown;
		animation-fill-mode: forwards;
	}

	.backOutDown {
		animation-duration: 0.5s;
		animation-name: backOutDown;
		animation-fill-mode: forwards;
	}

	.rotateIn {
		opacity: 0;
		animation-delay: 0.5s;
		animation-duration: 0.5s;
		animation-name: rotateIn;
		animation-fill-mode: forwards;
	}

	.rotateOut {
		animation-duration: 0.5s;
		animation-name: rotateOut;
		animation-fill-mode: forwards;
	}
</style>

<MudCarousel Class="mud-width-full" Style="height:700px" TData="object" AutoCycle="false">
	<MudCarouselItem Transition="Transition.Custom" CustomTransitionEnter="backInDown" CustomTransitionExit="backOutDown">
		<div class="d-flex" style="height:100%">
			<MudChart Class="align-self-center py-4 flex-1" ChartType="MudBlazor.ChartType.Bar" ChartSeries="@Series" @bind-SelectedIndex="Index" XAxisLabels="@XAxisLabels.Value" Width="100%" Height="550px"></MudChart>
		</div>
	</MudCarouselItem>
	<MudCarouselItem Transition="Transition.Custom" CustomTransitionEnter="rotateIn" CustomTransitionExit="rotateOut">
		<div class="d-flex"  style="height:100%">
			<MudChart Class="align-self-center py-4 flex-1" ChartType="MudBlazor.ChartType.Donut" Width="100%" Height="300px" InputData="@(ExpensesList.ToArray())" InputLabels="@(CategoriesList.ToArray())">
				<CustomGraphics>
					<text class="donut-inner-text" x="47%" y="35%" dominant-baseline="middle" text-anchor="middle" fill="black" font-family="Helvetica" font-size="2">Total</text>
					<text class="donut-inner-text" x="47%" y="50%" dominant-baseline="middle" text-anchor="middle" fill="black" font-family="Helvetica" font-size="5">@Math.Round(ExpensesList.Sum(), 2)</text>
				</CustomGraphics>
			</MudChart>
		</div>
	</MudCarouselItem>
</MudCarousel>

@code {
	public List<SpendLess.Shared.Transactions> Transactions = new List<SpendLess.Shared.Transactions>();

	public List<string> CategoriesList;
	public List<double> ExpensesList;
	public List<double> DailyExpenses;
	public List<ChartSeries> Series;

	private DateTime? _yearMonth = DateTime.Today;

	[Parameter]
	public DateTime? YearMonth
	{
		get
		{
			return _yearMonth;
		}
		set
		{
			if (_yearMonth == value)
				return;
			XAxisLabels = new Lazy<string[]>(() => InitDateLabels());
			_yearMonth = value;
			OnParametersSetAsync();
		}
	}

	[Parameter]
	public EventCallback<DateTime> YearMonthChanged { get; set; }

	private int Index = -1;

	public Lazy<string[]> XAxisLabels;

	protected override async Task OnParametersSetAsync()
	{
		Transactions = TransactionService.Transactions;
		DailyExpenses = new List<double>();
		Series = new List<ChartSeries>();

		var firstTable = from item in Transactions
							where !item.Category.Contains("Income") &&
							(item.TransactionDate.Year == ((DateTime)YearMonth).Year && item.TransactionDate.Month == ((DateTime)YearMonth).Month)
							select item;
		var results = from item in firstTable group item by item.Category into g select new { Category = g.First().Category, TotalAmount = g.Sum(pc => pc.Amount) };
		CategoriesList = (from item in results select item.Category).ToList();
		ExpensesList = (from item in results select Math.Abs((double)item.TotalAmount)).ToList();

		foreach (var day in GetDates((DateTime)YearMonth))
		{
			DailyExpenses.Add((from item in Transactions where item.TransactionDate == day && !item.Category.Contains("Income") select Math.Abs((double)item.Amount)).Sum());
		}

		Series.Add(new ChartSeries() { Name = "Expenses", Data = ((DailyExpenses).ToArray()) });

		StateHasChanged();
	}

	public string[] InitDateLabels()
	{
		return (from day in GetDates((DateTime)YearMonth) select day.Day.ToString()).ToArray();
	}

	public static List<DateTime> GetDates(DateTime date)
	{
		int year = int.Parse(date.ToString("yyyy"));
		int month = int.Parse(date.ToString("MM"));

		return Enumerable.Range(1, DateTime.DaysInMonth(year, month))
		.Select(day => new DateTime(year, month, day))
		.ToList();
	}

	protected override async Task OnInitializedAsync()
	{
		TransactionService.TransactionsChanged += ((source, args) => StateHasChanged());
		TransactionService.TransactionsChanged += ((source, args) => OnParametersSetAsync());
		XAxisLabels = new Lazy<string[]>(InitDateLabels);
	}
}