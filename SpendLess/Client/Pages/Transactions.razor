@page "/transactions"
@using System.Text.Json;
@using System.Text.Json.Serialization;
@using SpendLess.Shared
@using SpendLess.Client.Services
@using System.Net.Http.Json
@using MudBlazor.Services;
@attribute [Authorize]
@inject HttpClient httpClient
@inject ITransactionService TransactionService


<h3>Have you done any transactions recently?</h3>

<br />

<!-- User inputs UI -->
<div class="gap-4 d-flex flex-wrap">
    @{
        if (toggleExpenseIncome == false)
        {
                            <MudTextField @bind-Value="textValue" Label="I spent money on..." Variant="Variant.Outlined"></MudTextField>
                            <MudAutocomplete T="string" Label="Category" @bind-Value="categoryValue" SearchFunc="@Search1" Variant="Variant.Outlined" />
                            <MudTextField @bind-Value="amount" Label="Amount" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.AttachMoney" />
        }
        else
        {
                            <MudTextField @bind-Value="textValue" Label="I made money from..." Variant="Variant.Outlined"></MudTextField>
                            <MudTextField @bind-Value="amount" Label="Amount" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.AttachMoney" />
        }

                <MudDatePicker Label="Date" Editable="true" @bind-Date="date" Variant="Variant.Outlined" />
    }
</div>

@code {
    //User input values
    private int sk;
    private string? textValue;
    private string? categoryValue;
    private double? amount = null;
    private DateTime? date = DateTime.Today;
}


<br />

<!-- Save, toggle buttons -->
<div>
    <button class="btn btn-primary" @onclick="Savelist">Save</button>
    <MudToggleIconButton @bind-Toggled="@toggleExpenseIncome" Icon="@Icons.Filled.AttachMoney" Color="@Color.Error" Title="Off" ToggledIcon="@Icons.Filled.AttachMoney" ToggledColor="@Color.Success" ToggledTitle="On" />
    <span>@(toggleExpenseIncome ? "Income" : "Expense")</span>
    <MudToggleIconButton @bind-Toggled="@togglePeriodical" Icon="@Icons.Filled.TimerOff" Color="@Color.Error" Title="Off" ToggledIcon="@Icons.Filled.Timer" ToggledColor="@Color.Success" ToggledTitle="On" />
    <span>@(togglePeriodical ? "Periodic" : "OneTime")</span>
</div>
@{
    if (togglePeriodical)
    {
        <div class="gap-4 d-flex flex-wrap">
            <p>Repeat every</p>
            <MudTextField @bind-Value="interval" Variant="Variant.Outlined"></MudTextField>
            <MudSelect T="string" @bind-Value="period" AnchorOrigin="Origin.BottomCenter">
                <MudSelectItem Value="@("day(s)")" />
                <MudSelectItem Value="@("week(s)")" />
                <MudSelectItem Value="@("month(s)")" />
            </MudSelect>
            <MudDatePicker Label="End Date" Editable="true" @bind-Date="endDate" Variant="Variant.Outlined" />
        </div>
    }
}



@code {
    private bool toggleExpenseIncome;
    private bool togglePeriodical;

    private int interval = 1;
    private string period = "day(s)";
    private DateTime? endDate = null;
}

<br />

<br />

<!-- Transaction table -->
<MudSimpleTable Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Style="overflow-x: auto;">
    <thead>
        <tr>
            <th></th>
            <th></th>
            <th width="20%">
                <MudDatePicker Label="DateFilterFrom" Editable="true" @bind-Date="dateFilterFrom" Variant="Variant.Outlined"/>
            </th>
            <th width="20%">
                <MudDatePicker Label="DateFilterTo" Editable="true" @bind-Date="dateFilterTo" Variant="Variant.Outlined" />
            </th>
            <th></th>
        </tr>
        <tr>
            @foreach (var h in headings)
            {
                        <th>@h</th>
            }
            <th width="3%"></th>
        </tr>

    </thead>
    <tbody>
        @{
            if (TransactionService.Transactions is not null)
            {
                List<SpendLess.Shared.Transactions> filteredTransactions = TransactionService.Transactions;

                if (dateFilterTo != null)
                    filteredTransactions = filteredTransactions.Where(x => x.TransactionDate <= dateFilterTo).ToList();

                if (dateFilterFrom != null)
                    filteredTransactions = filteredTransactions.Where(x => x.TransactionDate >= dateFilterFrom).ToList();


                if (filteredTransactions != null)
                {
                    for (int i = 0; i < filteredTransactions.Count; i++)
                    {
                        int id = filteredTransactions.ElementAt(i).Id ?? 0;
                        <tr>
                            <td>@filteredTransactions.ElementAt(i).Comment</td>
                            <td>@(
                    (filteredTransactions.ElementAt(i).Category)
                    )</td>
                            <td>@filteredTransactions.ElementAt(i).Amount</td>
                            <td>@filteredTransactions.ElementAt(i).TransactionDate.ToString("dd/MM/yyy")</td>
                            <td><button class="btn btn-primary" @onclick="() => DeleteRow(id)">Delete</button></td>
                        </tr>
                    }

                }
            }
        }
    </tbody>
</MudSimpleTable>

@code {
    //Table properties
    private bool dense = false;
    private bool hover = true;
    private bool striped = false;
    private bool bordered = false;

    DateTime? dateFilterFrom = new DateTime(DateTime.Today.Year, DateTime.Today.Month, 1);
    DateTime? dateFilterTo = DateTime.Today;

    string[] headings = { "Item", "Category", "Amount", "Date" };

    public async Task DeleteRow(int id)
    {
        await TransactionService.DeleteTransaction(id);
        TransactionService.OnTransactionsChanged();

    }
}


@code {

    public async Task Savelist()
    {

        if (amount < 0)
        {
            //SnackBarService.WarningMsg("Amount can not be negative or zero!");
            return;
        }

        if (toggleExpenseIncome == true)
        {
            categoryValue = "Income";
        }

        if(textValue == null)
        {
            textValue = "Transaction";
        }

        if (categoryValue != null && date.HasValue && amount != null)
        {

            if (toggleExpenseIncome == false)
            {
                amount = -amount;
            }

            if(togglePeriodical == true)
            {
                await TransactionService.AddPeriodicTransaction(amount, categoryValue, date ?? DateTime.MinValue, textValue, period, interval, endDate);
            }
            else
            {
                await TransactionService.AddTransaction(amount, categoryValue, date ?? DateTime.MinValue, textValue);
            }

            TransactionService.Transactions.Sort();
            await UpdatePage();

            categoryValue = null;
            amount = null;
        }

        else
        {
            //SnackBarService.WarningMsg("Fields can not be empty!");
            return;
        }
        textValue = null;
        TransactionService.OnTransactionsChanged();
    }

    private static bool _loading;

    public static async Task UpdatePage()
    {
        _loading = true;
        await Task.Delay(1);
        _loading = false;
    }

    protected override async Task OnInitializedAsync()
    {
        TransactionService.TransactionsChanged += (source, args) => StateHasChanged();
    }

    private async Task<IEnumerable<string>> Search1(string value)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(5);

        string[] categoryVal = System.Enum.GetNames(typeof(SpendLess.Shared.CategoryValues));


        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
            return categoryVal.Where(x => x != "Income");
        return categoryVal.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase) && x != "Income");
    }
}
