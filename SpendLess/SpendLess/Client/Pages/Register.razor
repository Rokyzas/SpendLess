@page "/Register"
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using SpendLess.Shared
@using SpendLess.Client.Services
@inject AuthenticationService AuthService
@inject NavigationManager NavigationManager

<MudGrid>
    <MudItem xs="12" sm="7">
        <MudPaper Class="pa-4">
            <MudForm @bind-IsValid="@success">
                    <MudTextField @bind-Value="username" T="string" Label="Your name" Required="true" RequiredError="Your name is required!"/>
                    <MudTextField @bind-Value="email" T="string" Label="Email" Required="true"
                                  Validation="@(new Func<string, string?>(AuthService.CheckEmail))"/>
                    <MudTextField @bind-Value="password" T="string" Label="Password" HelperText="Password must be at least 8 symbols long, it must c    ontain at least 1 digit, 1 uppercase, 1 lowecase letter and a special symbol."
                                  InputType="InputType.Password"
                                  Validation="@(new Func<string, string?>(AuthService.CheckPassword))" Required="true"/>
                    <div class="d-flex align-center justify-space-between">
                        <MudCheckBox T="bool" Required="true" RequiredError="You must agree" Label="I agree with terms :)"  />
                        <MudButton  Href = "Login" Variant="Variant.Filled" Color="MudBlazor.Color.Primary" Class="ml-auto">Cancel</MudButton>
                        <MudButton Variant="Variant.Filled" Color="MudBlazor.Color.Primary" Disabled="@(!success)" OnClick="()=>RegisterAccount(success)" Class="ml-auto">Register</MudButton>
                    </div>
            </MudForm>   
        </MudPaper>
    </MudItem>
</MudGrid>
@code {

    private String? username;
    private String? email;
    private String? password;
    bool success;

    /*protected async Task ValidateRegistration()
        {
        await AuthService.SetUserInfo();
    }*/
    
    private async Task RegisterAccount(bool success = false)
    {

        if (success)
        {
                if (await AuthService.CreateAccount(username, email, password))
                {
                    SnackBarService.SuccessMsg("Account has been created");
                    NavigationManager.NavigateTo("");
                }
                else
                {
                    SnackBarService.ErrorMsg("Could not create account, this emails is already registered");
                }           
         }
        else
        {
                SnackBarService.ErrorMsg("Could not register, try again");
                return;
        }   
    }
}