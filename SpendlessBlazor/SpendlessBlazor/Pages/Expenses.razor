@page "/expenses"
@using System.Text.Json;
@using System.Text.Json.Serialization;
@using SpendlessBlazor.Data
@using SpendlessBlazor.Services
@using System.Net.Http.Json
@using MudBlazor.Services;

@inject HttpClient httpClient


<h3>Have you done any transactions recently?</h3>

<br />

<!-- User inputs UI -->
<div class="gap-4 d-flex flex-wrap">
    @{
        if(toggleExpenseIncome == false)
        {
            <MudTextField @bind-Value="textValue" Label="I spent money on..." Variant="Variant.Outlined"></MudTextField>
            <MudAutocomplete T="string" Label="Category" @bind-Value="categoryValue" SearchFunc="@Search1" Variant="Variant.Outlined" />
            <MudTextField @bind-Value="amount" Label="Amount" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.AttachMoney" />
        }
        else
        {
            <MudTextField @bind-Value="textValue" Label="I made money from..." Variant="Variant.Outlined"></MudTextField>
            <MudTextField @bind-Value="amount" Label="Amount" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.AttachMoney" />
        }

        <MudDatePicker Label="Date" Editable="true" @bind-Date="date" Variant="Variant.Outlined" />
    }
</div>

@code {
    //User input values
    public int sk;
    public string? textValue;
    private string? categoryValue;
    public double amount = 0;
    DateTime? date = DateTime.Today;
}


<br />

<!-- Save, toggle button -->
<div>
    <button class="btn btn-primary" @onclick="Savelist">Save</button>
    <MudToggleIconButton @bind-Toggled="@toggleExpenseIncome" Icon="@Icons.Filled.AttachMoney" Color="@Color.Error" Title="Off" ToggledIcon="@Icons.Filled.AttachMoney" ToggledColor="@Color.Success" ToggledTitle="On" />
    <span>@(toggleExpenseIncome ? "Income" : "Expense")</span>
</div>

@code {
    public bool toggleExpenseIncome;
}

<br />

<br />

<!-- Transaction table -->
<MudSimpleTable Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Style="overflow-x: auto;">
    <thead>
        <tr>
            <th></th>
            <th></th>
            <th width="20%">
                <MudDatePicker Label="DateFilterFrom" Editable="true" @bind-Date="dateFilterFrom" Variant="Variant.Outlined"/>
            </th>
            <th width="20%">
                <MudDatePicker Label="DateFilterTo" Editable="true" @bind-Date="dateFilterTo" Variant="Variant.Outlined" />
            </th>
            <th></th>
        </tr>
        <tr>
            @foreach (var h in headings)
            {
                <th>@h</th>
            }
            <th width="3%"></th>
        </tr>

    </thead>
    <tbody>
        @{
            List<Transaction> filteredTransactions = transactions;

            if(dateFilterTo != null)
                filteredTransactions = filteredTransactions.Where(x => x.date <= dateFilterTo).ToList();

            if(dateFilterFrom != null)
                filteredTransactions = filteredTransactions.Where(x => x.date >= dateFilterFrom).ToList();


            if (filteredTransactions != null)
            {
                for (int i = 0; i < filteredTransactions.Count; i++)
                {
                    var nr = i;
                    <tr>
                        <td>@filteredTransactions.ElementAt(i).textValue</td>
                        <td>@((Data.CategoryValues)(transactions.ElementAt(i).categoryValue))</td>
                        <td>@filteredTransactions.ElementAt(i).amount</td>
                        <td>@filteredTransactions.ElementAt(i).date?.ToString("dd/MM/yyy")</td>
                        <td><button class="btn btn-primary" @onclick="() => DeleteRow(filteredTransactions.ElementAt(nr))">Delete</button></td>
                    </tr>
                }
            }
        }
    </tbody>
</MudSimpleTable>

@code {
    //Table properties
    private bool dense = false;
    private bool hover = true;
    private bool striped = false;
    private bool bordered = false;

    DateTime? dateFilterFrom = new DateTime(DateTime.Today.Year, DateTime.Today.Month, 1);
    DateTime? dateFilterTo = DateTime.Today;

    string[] headings = { "Item", "Category", "Amount", "Date" };

    public void DeleteRow(Transaction element)
    {

        SnackBarService.SuccessMsg("Element was successfully deleted");
        int c = 0;
        foreach (var row in transactions)
        {
            if (row.elementID.Equals(element.elementID))
            {
                transactions.RemoveAt(c);
                TransactionService.WriteToJson();
                break;
            }

            c++;
        }

    }
}


@code {

    public static List<Transaction> transactions = new List<Transaction>();


    public void Savelist(){

        if (amount < 0)
        {
            SnackBarService.WarningMsg("Amount can not be negative or zero!");
            return;
        }

        if (toggleExpenseIncome == true)
        {
            categoryValue = "Income";
        }

        if (textValue != null && categoryValue != null && date != null)
        {

            if (toggleExpenseIncome == false)
            {
                amount = -amount;
            }

            Data.CategoryValues tempEnum;
            if (!Enum.TryParse(categoryValue, out tempEnum))
            {
                SnackBarService.WarningMsg("This category was not found!");
                return;

            }
            else
            {
                for (int i = 0; i < transactions.Count; ++i)
                {
                    Transaction temp = transactions.ElementAt(i);
                    temp.elementID = i;
                    transactions[i] = temp;
                }

                transactions.Add(new Data.Transaction { elementID= transactions.Count(), textValue= textValue, amount= amount, categoryValue= tempEnum, date= date });
            }
            categoryValue = null;
            amount = 0;


        } 
        else
        {
            SnackBarService.WarningMsg("Fields can not be empty!");
            return;
        }

        TransactionService.WriteToJson();
        SnackBarService.SuccessMsg("Succsesfully saved data");
        textValue = null;

        NavMenu.Balance();
    }

    protected override async Task OnInitializedAsync()
    {
        transactions = TransactionService.ReadJson();
        await Task.Delay(5);
    }

    private async Task<IEnumerable<string>> Search1(string value)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(5);

        string[] categoryVal = Enum.GetValues(typeof(Data.CategoryValues))
            .Cast<Data.CategoryValues>()
            .Select(x => x.ToString())
            .ToArray();

        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
            return categoryVal.Where(x => x != "Income");
        return categoryVal.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase) && x != "Income");
    }
}