@page "/expenses"
@using System.Text.Json;
@using System.Text.Json.Serialization;
@using SpendlessBlazor.Data
@using SpendlessBlazor.Services
@using System.Net.Http.Json
@using MudBlazor.Services;

@inject SpendlessBlazor.Services.ITransactionService<Transaction> InfoService
@inject HttpClient httpClient


<h3>Have you done any transactions recently?</h3>

<br />

<div class="gap-4 d-flex flex-wrap">
    @{
        if(toggleExpenseIncome == false)
        {
                    <MudTextField @bind-Value="textValue" Label="I spent money on..." Variant="Variant.Outlined"></MudTextField>
                    <MudAutocomplete T="string" Label="Category" @bind-Value="categoryValue" SearchFunc="@Search1" Variant="Variant.Outlined" />
                    <MudTextField @bind-Value="amount" Label="Amount" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.AttachMoney" />
        }
        else
        {
                <MudTextField @bind-Value="textValue" Label="I made money from..." Variant="Variant.Outlined"></MudTextField>
                <MudTextField @bind-Value="amount" Label="Amount" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.AttachMoney" />
        }

            <MudDatePicker Label="Date" Editable="true" @bind-Date="date" Variant="Variant.Outlined" />
    }
    @code {
        public int sk { get; set; }
        public string? textValue { get; set; }
        private string? categoryValue;
        public double amount { get; set; } = 0;
        DateTime? date = DateTime.Today;

    }
</div>

<br />

<div>
    <button class="btn btn-primary" @onclick="Savelist">Save</button>
<MudToggleIconButton @bind-Toggled="@toggleExpenseIncome"
                         Icon="@Icons.Filled.AttachMoney" Color="@Color.Error" Title="Off"
                         ToggledIcon="@Icons.Filled.AttachMoney" ToggledColor="@Color.Success" ToggledTitle="On" />

    <span>@(toggleExpenseIncome ? "Income" : "Expense")</span>
@code {
    public bool toggleExpenseIncome { get; set; }
}
</div>

<br />

<br />

<MudSimpleTable Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Style="overflow-x: auto;">
    <thead>
        <tr>
            <th></th>
            <th></th>
            <th width="20%">
                <MudDatePicker Label="DateFilterFrom" Editable="true" @bind-Date="dateFilterFrom" Variant="Variant.Outlined"/>
                @code {
                    DateTime? dateFilterFrom = new DateTime(DateTime.Today.Year, DateTime.Today.Month, 1);
                }
            </th>
            <th width="20%">
                <MudDatePicker Label="DateFilterTo" Editable="true" @bind-Date="dateFilterTo" Variant="Variant.Outlined" />
                @code {
                    DateTime? dateFilterTo = DateTime.Today;
                }
            </th>
            <th></th>
        </tr>
        <tr>
            @foreach (var h in headings)
            {
                <th>@h</th>
            }
            <th width="3%"></th>
        </tr>

    </thead>
    <tbody>
        @{
            List<Transaction> filteredTransactions = transactions;

            if(dateFilterTo != null)
                filteredTransactions = filteredTransactions.Where(x => x.date <= dateFilterTo).ToList();

            if(dateFilterFrom != null)
                filteredTransactions = filteredTransactions.Where(x => x.date >= dateFilterFrom).ToList();


            if (filteredTransactions != null)
                for (int i = 0; i < filteredTransactions.Count; i++)
                {
                    var nr = i;
                    <tr>

                            <td>@filteredTransactions.ElementAt(i).textValue</td>
                            <td>@((Data.CategoryValues)(transactions.ElementAt(i).categoryValue))</td>
                            <td>@filteredTransactions.ElementAt(i).amount</td>
                            <td>@filteredTransactions.ElementAt(i).date?.ToString("dd/MM/yyy")</td>
                            <td>
                            <button class="btn btn-primary" @onclick="() => DeleteRow(filteredTransactions.ElementAt(nr))">Delete</button>
                            
                            
                           
                            </td>
                        </tr>
                }
        }
    </tbody>
</MudSimpleTable>
@code {
    private bool dense = false;
    private bool hover = true;
    private bool striped = false;
    private bool bordered = false;

    string[] headings = { "Item", "Category", "Amount", "Date" };
}

@code {

    [Parameter]
    public static List<Transaction> transactions { get; set; } = new List<Transaction>();

    public void DeleteRow(Transaction element)
    {

        SnackBarService.SuccessMsg("Element was successfully deleted");
        int c = 0;
        foreach (var row in transactions)
        {
            if (row.elementID.Equals(element.elementID)){
                transactions.RemoveAt(c);
                WriteToJson();
                break;
            }

            c++;
        }

    }



    public void Savelist(){
        
        if (amount < 0)
        {
            SnackBarService.WarningMsg("Amount can not be negative or zero!");
            return;
        }

        if (toggleExpenseIncome == true)
        {
            categoryValue = "Income";
        }

        if (textValue != null && categoryValue != null && date != null)
        {

            if (toggleExpenseIncome == false)
            {
                amount = -amount;
            }
            
            Data.CategoryValues tempEnum;
            if (!Enum.TryParse(categoryValue, out tempEnum))
            {
                SnackBarService.WarningMsg("This category was not found!");
                return;

            }
            else
            {
                for (int i = 0; i < transactions.Count; ++i)
                {
                    transactions.ElementAt(i).elementID = i;
                }

                transactions.Add(new Data.Transaction(elementID: transactions.Count(), textValue: textValue, amount: Math.Floor(100 * amount) / 100, categoryValue: tempEnum, date: date));
            }
            categoryValue = null;
            amount = 0;


        } 
        else
        {
            SnackBarService.WarningMsg("Fields can not be empty!");
            return;
        }

        WriteToJson();
        SnackBarService.SuccessMsg("Succsesfully saved data");

    }

    public void WriteToJson()
    {
        var options = new JsonSerializerOptions { WriteIndented = true };
        string jsonString = JsonSerializer.Serialize(transactions, options);
        string path = $"{System.IO.Directory.GetCurrentDirectory()}{"\\wwwroot\\data.json"}";

        try
        {
            using (FileStream fileStream = new FileStream(path, FileMode.Create, FileAccess.Write, FileShare.None))
            {
                using (System.IO.StreamWriter streamWriter = new System.IO.StreamWriter(fileStream))
                {
                    streamWriter.Write(jsonString);
                }
            }
        }
        catch (Exception)
        {
            SnackBarService.ErrorMsg("Failed to save data");
        }

  
    }


    protected override async Task OnInitializedAsync()
    {
        transactions = InfoService.ReadJson();
        await Task.Delay(5);
    }

    private async Task<IEnumerable<string>> Search1(string value)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(5);

        string[] categoryVal = Enum.GetValues(typeof(Data.CategoryValues))
            .Cast<Data.CategoryValues>()
            .Select(x => x.ToString())
            .ToArray();

        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
            return categoryVal.Where(x => x != "Income");
        return categoryVal.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase) && x != "Income");
    }
}