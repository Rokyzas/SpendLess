@page "/expenses"
@using System.Text.Json;
@using System.Text.Json.Serialization;
@using SpendlessBlazor.Shared
@using SpendlessBlazor.Services
@using System.Net.Http.Json
@using MudBlazor.Services;


@inject SpendlessBlazor.Services.IInfoService<Info> InfoService
@inject HttpClient httpClient
@inject ISnackbar Snackbar


<h3>Where did you spend your money?</h3>

<br />

<div class="gap-4 d-flex flex-wrap">
    <MudTextField @bind-Value="textValue" Label="I spent money on..." Variant="Variant.Outlined"></MudTextField>
    @code {
        public string? textValue { get; set; }
    }
    <MudAutocomplete T="string" Label="Category" @bind-Value="categoryValue" SearchFunc="@Search1" Variant="Variant.Outlined" />
    @code {
        private string? categoryValue;
}
    <MudTextField @bind-Value="amount" Label="Amount" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.AttachMoney" />
    @code {
        public double amount { get; set; } = 0;
    }
    <MudDatePicker Label="Date" Editable="true" @bind-Date="date" Variant="Variant.Outlined" />
    @code {
        DateTime? date = DateTime.Today;
    }
</div>

<br />

<button class="btn btn-primary" @onclick="WriteToJson">Save</button>

<br />

<br />

<MudSimpleTable Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Style="overflow-x: auto;">
    <thead>
        <tr>
            @foreach (var h in headings)
            {
                <th>@h</th>
            }
        </tr>
    </thead>
    <tbody>
        @{
            if (info != null)
                for (int i = 0; i < info.Count; i++)
                {
                    <tr>
                        <td>@info.ElementAt(i).textValue</td>
                        <td>@((Shared.CategoryValues)(info.ElementAt(i).categoryValue))</td>
                        <td>@info.ElementAt(i).amount</td>
                        <td>@info.ElementAt(i).date?.ToString("dd/MM/yyy")</td>
                    </tr>
                }
        }
    </tbody>
</MudSimpleTable>
@code {
    private bool dense = false;
    private bool hover = true;
    private bool striped = false;
    private bool bordered = false;

    string[] headings = { "Item", "Category", "Amount", "Date" };
}

@code {

    [Parameter]
    public static List<Info> info { get; set; } = new List<Info>();
    public SnackBarService snackbar;


    public void WriteToJson()
    {
        if (amount != null && categoryValue != null && date != null)
        {
            Shared.CategoryValues tempEnum;
            if (Enum.TryParse(categoryValue, out tempEnum))
                info.Add(new Shared.Info(textValue, amount, tempEnum, date));
        } else{
            snackbar.WarningMsg("Fields can not be empty!");
            return;
        }


        var options = new JsonSerializerOptions { WriteIndented = true };
        string jsonString = JsonSerializer.Serialize(info, options);
        string path = $"{System.IO.Directory.GetCurrentDirectory()}{"\\wwwroot\\data.json"}";

        try
        {
            using (FileStream fileStream = new FileStream(path, FileMode.Create, FileAccess.Write, FileShare.None))
            {
                using (System.IO.StreamWriter streamWriter = new System.IO.StreamWriter(fileStream))
                {
                    streamWriter.Write(jsonString);
                }
            }
        }
        catch (Exception)
        {
            snackbar.ErrorMsg("Failed to save data");
        }

        snackbar.SuccessMsg("Succsesfully saved data");
    }


    protected override async Task OnInitializedAsync()
    {
        snackbar = new SnackBarService(Snackbar);
        info = InfoService.ReadJson(snackbar);
        await Task.Delay(5);
    }

    private async Task<IEnumerable<string>> Search1(string value)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(5);

        string[] categoryVal = Enum.GetValues(typeof(Shared.CategoryValues))
            .Cast<Shared.CategoryValues>()
            .Select(x => x.ToString())
            .ToArray();

        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
            return categoryVal;
        return categoryVal.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }
}